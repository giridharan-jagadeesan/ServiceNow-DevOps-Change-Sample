def packageName = "app-devops-package.war"

def artifactname = "app-devops.jar"
def version = "1.${BUILD_NUMBER}"
def semanticVersion = "1.${BUILD_NUMBER}.0"

def repoName = "pramaraju96/DevOps-Test"
def pipelineName = "${JOB_NAME}"

def changeRequestId = "defaultChangeRequestId"
def stageName = "Deploy"

pipeline {
	agent any
	
	tools {
		maven 'Maven'
	}

	environment {
		SCANNER_HOME = tool 'sonarScanner'
		VERACODE_APPLICATION_NAME = 'ServiceNow DevOps App#1'
		VERACODE_SCANNER_NAME = 'Veracode'
	} 

	stages {
		stage('Build') {
			steps {
				sh 'mvn -B -DskipTests clean compile'
			}
		}

		stage('Test') {
			steps {
			  	sh 'mvn test'
				sleep(5);
			}
			post {
				always {
					junit "**/target/surefire-reports/*.xml"
				}
			}
		}

		stage('Register Artifact') {
			steps {
				snDevOpsArtifact(artifactsPayload: """
				{
				"artifacts":
				[
				    {
				        "name": "${artifactname}",
				        "version": "${version}",
				        "semanticVersion": "${semanticVersion}",
				        "repositoryName": "${repoName}"
				    }
				],
				"branchName": "main"
				}""")

				// uncomment the below block of code to use artifact step with JFrog
				/*
				sh 'mvn package'
				
				echo "Uploading the artifacts to JFrog"

				script{
					def server = Artifactory.server 'ramadevops'
					def uploadSpec = """{
						"files": [{
							"pattern": "target/devops-e2e-1.40.0-SNAPSHOT.jar",
							"target": "devops-jfrog-local-repo/"
						}]
					}"""

					def buildInfo = server.upload(uploadSpec) 
					server.publishBuildInfo buildInfo
					sleep(5);
				}

				echo "Downloading the artifacts from JFrog"

				script{
					def server = Artifactory.server 'ramadevops'
					def downSpec= """{
						"files": [{
							"pattern": "devops-jfrog-local-repo/devops-e2e-1.40.0-SNAPSHOT.jar",
							"target":"/var/jenkins_home/workspace/rama folder/CD Pipeline/${BUILD_NUMBER}/"
						}]
					}"""

					def buildInfo = server.download(downSpec) 
					server.publishBuildInfo buildInfo
					sleep(5);
				}
				*/

			}     
		}

		stage('Sonar Scan') {
			steps {
				sonarSummaries()
			}
		}

		stage('Security Scan') {
			steps {
				veracode applicationName: "${env.VERACODE_APPLICATION_NAME}", criticality: 'VeryHigh', debug: true, timeout: 20, fileNamePattern: '', pHost: '', pPassword: '', pUser: '', replacementPattern: '', sandboxName: '', scanExcludesPattern: '', scanIncludesPattern: '', scanName: "${BUILD_TAG}", uploadExcludesPattern: '', uploadIncludesPattern: 'target/*.jar', vid: "5a57339d6779ffb76782e03df3f6e9d1", vkey: "f31d151c427a3286469a6291b14dee15e7f553e066b32c801f09014dc3282de4f51a81cd0bde7c7dd9d95de9a71a32c8a2c582158f278320ae765fe9fd232e0a", waitForScan : true
			}
		}

		stage('Register Package') {
			steps {
				snDevOpsPackage(
				name: "${packageName}",
				artifactsPayload: """
				{
				    "artifacts":
				    [
				        {
				            "name": "${artifactname}",
				            "version": "${version}",
				            "semanticVersion": "${semanticVersion}",
				            "repositoryName": "${repoName}"
				        }
				    ],
				    "branchName": "main"
				}""")
			}
		}
		  
		stage('Change') {
			steps {
			    snDevOpsChange(changeRequestDetails: '''
			    {
			    "attributes": {
					"requested_by": {
						"name": "DevOps System"
					}, //requested_by with name.
					//You can provide requested_by with sys_id. Example: "requested_by": "62826bf03710200044e0bfc8bcbe5df1", 
					"assignment_group": {
						"name": "Change Management"
					}, //assignment_group with name.
					//You can provide assignment_group with sys_id. Example: "assignment_group": "5f721d93c0a8010e015533746de18bf9",
					"priority": "2",
					"comments": "This is a sample pipeline script to be added in your change step",
					"work_notes": "Update this to work_notes",
					"start_date": "2022-01-05 11:59:59", //This is the planned start date.
					"end_date": "2022-01-08 11:59:59" // This is the planned end date.
				}
			    }''')
			}
		}

		stage('Deploy') {
			steps {
				echo "Deploying the change..."
			}
		}
	}
}

def sonarSummaries() {
	withSonarQubeEnv(installationName: 'ramasonarcloud'){
		sh 'mvn clean verify sonar:sonar \
		    -Dsonar.login=1926d793f92181dd0ac406335d4d4bea392a3023 \
		    -Dsonar.host.url=https://sonarcloud.io \
		    -Dsonar.organization=pramaraju96 \
		    -Dsonar.projectKey=pramaraju96_DevOps-Test'
    }
}
