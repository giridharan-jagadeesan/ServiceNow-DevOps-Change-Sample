pipeline {
	agent any
	
	tools {
		maven 'Maven'
	}

	environment {
		SCANNER_HOME = tool 'sonarScanner'
		VERACODE_APPLICATION_NAME = 'ServiceNow DevOps App#1'
		VERACODE_SCANNER_NAME = 'Veracode'
	} 

	stages {
		stage('Build') {
			steps {
				sh 'mvn -B -DskipTests clean compile'
			}
		}

		stage('Test') {
			steps {
			  	sh 'mvn test'
				sleep(5);
			}
			post {
				always {
					junit "**/target/surefire-reports/*.xml"
				}
			}
		}

		stage('Register Artifact') {
			steps {
				snDevOpsArtifact(artifactsPayload: """
				{
				"artifacts":
				[
				    {
				        "name": "${artifactname}",
				        "version": "${version}",
				        "semanticVersion": "${semanticVersion}",
				        "repositoryName": "${repoName}"
				    }
				],
				"branchName": "main"
				}""")

				// uncomment the below block of code to use artifact step with JFrog
				/*
				sh 'mvn package'
				
				echo "Uploading the artifacts to JFrog"

				script{
					def server = Artifactory.server 'ramadevops'
					def uploadSpec = """{
						"files": [{
							"pattern": "target/devops-e2e-1.40.0-SNAPSHOT.jar",
							"target": "devops-jfrog-local-repo/"
						}]
					}"""

					def buildInfo = server.upload(uploadSpec) 
					server.publishBuildInfo buildInfo
					sleep(5);
				}

				echo "Downloading the artifacts from JFrog"

				script{
					def server = Artifactory.server 'ramadevops'
					def downSpec= """{
						"files": [{
							"pattern": "devops-jfrog-local-repo/devops-e2e-1.40.0-SNAPSHOT.jar",
							"target":"/var/jenkins_home/workspace/rama folder/CD Pipeline/${BUILD_NUMBER}/"
						}]
					}"""

					def buildInfo = server.download(downSpec) 
					server.publishBuildInfo buildInfo
					sleep(5);
				}
				*/

			}     
		}

		stage('Sonar Scan') {
			steps {
				sonarSummaries()
			}
		}

		stage('Security Scan') {
			steps {
				veracode applicationName: "${env.VERACODE_APPLICATION_NAME}", criticality: 'VeryHigh', debug: true, timeout: 20, fileNamePattern: '', pHost: '', pPassword: '', pUser: '', replacementPattern: '', sandboxName: '', scanExcludesPattern: '', scanIncludesPattern: '', scanName: "${BUILD_TAG}", uploadExcludesPattern: '', uploadIncludesPattern: 'target/*.jar', vid: "VERACODE_API_ID", vkey: "VERACODE_API_KEY", waitForScan : true
			}
		}

		stage('Register Package') {
			steps {
				snDevOpsPackage(
				name: "${packageName}",
				artifactsPayload: """
				{
				    "artifacts":
				    [
				        {
				            "name": "${artifactname}",
				            "version": "${version}",
				            "semanticVersion": "${semanticVersion}",
				            "repositoryName": "${repoName}"
				        }
				    ],
				    "branchName": "main"
				}""")
			}
		}
		  
		stage('Change') {
			steps {
				snDevOpsChange(changeRequestDetails:"""
				{
				    "attributes":
				    {
				        "short_description": "Test description",
				        "priority": "1",
				        "start_date": "2021-02-05 08:00:00",
				        "end_date": "2022-04-05 08:00:00",
				        "justification": "test justification",
				        "description": "test description",
				        "cab_required": true,
				        "comments": "This update for work notes is from jenkins file",
				        "work_notes": "test work notes"
				    }
				}""")
			}
		}

		stage('Deploy') {
			steps {
				echo "Deploying the change..."
			}
		}
	}
}

def sonarSummaries() {
	withSonarQubeEnv(installationName: 'sonarcloud1'){
		sh 'mvn clean verify sonar:sonar \
		    -Dsonar.login=623a5b264ce3e56cd686b493e1229b9498d592f9 \
		    -Dsonar.host.url=https://sonarcloud.io \
		    -Dsonar.organization=pramaraju96 \
		    -Dsonar.projectKey=pramaraju96_DevOps-Test'
    }
}
